// clang-format off
//====================================================================================================================================================
// Copyright 2024 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================
// This file was automatically generated by the Team 302 code generator version 1.2.3.1
// Generated on Tuesday, February 6, 2024 7:12:04 PM

#include <string>

#include "PeriodicLooper.h"
#include "utils/logging/Logger.h"
#include "configs/RobotConfigMgr.h"
#include "configs/RobotConfigThing_1.h"

using std::string;

void RobotConfigThing_1::DefineMechanisms()
{
    Logger::GetLogger()->LogData ( LOGGER_LEVEL::PRINT, string ( "Initializing mechanism" ), string ( "Thing1Mech" ), "" );
                  Thing1MechGen* Thing1MechGenMech = new Thing1MechGen();
                  m_theThing1Mech = new Thing1Mech(Thing1MechGenMech);
                  m_theThing1Mech->Create();
                  m_theThing1Mech->Initialize(RobotConfigMgr::RobotIdentifier::THING_1);
                  m_theThing1Mech->CreateAndRegisterStates();
                  m_theThing1Mech->Init(m_theThing1Mech);
}

void RobotConfigThing_1::DefineVisionSensors()
{
    Limelight_1 = new DragonLimelight ( "Limelight_1", //std::string name,                      /// <I> - network table name
                                                            DragonCamera::PIPELINE::OFF, //PIPELINE initialPipeline,              /// <I> enum for starting pipeline
                                                            units::length::inch_t(0), //units::length::inch_t mountingXOffset, /// <I> x offset of cam from robot center (forward relative to robot)
                                                            units::length::inch_t(0), //units::length::inch_t mountingYOffset, /// <I> y offset of cam from robot center (left relative to robot)
                                                            units::length::inch_t(0), //units::length::inch_t mountingZOffset, /// <I> z offset of cam from robot center (up relative to robot)
                                                            units::angle::degree_t(0), //units::angle::degree_t pitch,          /// <I> - Pitch of camera
                                                            units::angle::degree_t(0), //units::angle::degree_t yaw,            /// <I> - Yaw of camera
                                                            units::angle::degree_t(0), //units::angle::degree_t roll,           /// <I> - Roll of camera
                                                            DragonLimelight::LED_MODE::LED_OFF, //LED_MODE ledMode,
                                                            DragonLimelight::CAM_MODE::CAM_VISION, //CAM_MODE camMode,
                                                            DragonLimelight::STREAM_MODE::STREAM_DEFAULT, //STREAM_MODE streamMode,
                                                            DragonLimelight::SNAPSHOT_MODE::SNAP_OFF//SNAPSHOT_MODE snapMode);
baseRobotElementClass.generateIndexedObjectCreation(int index) needs to be overridden
}
