
//====================================================================================================================================================
// Copyright 2024 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================

//==============================================================
// This file is auto generated by FRCrobotCodeGen302.exe Version $CODE_GENERATOR_VERSION$
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated, unless the changes are delimited by:
//==============================================================

// C++ Includes
#include <any>

// Team 302 Includes
#include <RobotDefinitions.h>

/*
    Will need to include all mechanism and sensor h files
    Will also need to include their builders
*/

/*
    Here's what this should look like once generated: (teamNumber is passed in from BuildDetailsReader where GetRobotDefinition is called)

    switch(teamNumber){
        case $$_ROBOT_ID_$$:
            return Get$$_ROBOT_ID_$$Definition();  //separate functions will make the code more readable during review
        case $$_ROBOT_ID_$$:
            return Get$$_ROBOT_ID_$$Definition();
        default:
            return Get302Defition();  //this could return comp bot or simulation bot
    }
*/
RobotDefinition *RobotDefinitions::GetRobotDefinition(int teamNumber)
{
    switch (teamNumber)
    {
    case 1:
        return Get1Definition();
        break;
    default:
        return Get302Definition();
        break;
    }
}

/*
    This is where all of the functions in the switch statement will be created
    Here's what one should look like once generated:

    RobotDefinition* Get302Definition()
    {
        /// NOTE switching to be one vector with type std::any for now, later on may go back to separate vectors if needed
        //std::vector<std::pair<RobotDefinitions::Components, Mechanism>> mechs = new std::vector<Mechanism>();
        //std::vector<std::pair<RobotDefinitions::Components, Sensor>> sensors = new std::vector<Sensor>();
        std::vector<std::pair<RobotDefinitions::Components, std::any>> components = new std::vector<std::pair<RobotDefinitions::Components, std::any>>();

        Mechanism intake = IntakeBuilder::GetBuilder()->CreateNewIntake(args); //or however the builders will be called to create mechs
        components.emplace_back(std::make_pair(RobotDefinitions::Components::Intake, intake));

        Mechanism shooter = ShooterBuilder::GetBuilder()->CreateNewShooter(args);
        components.emplace_back(std::make_pair(RobotDefinitions::Components::Shooter, shooter));

        Sensor intakeSensor = new BannerSensor(port);
        components.emplace_back(std::make_pair(RobotDefinitions::Components::IntakeSensor, intakeSensor));

        return new RobotDefinition(components);
    }
*/
RobotDefinition *RobotDefinitions::Get1Definition()
{
    std::vector<std::pair<RobotDefinition::Components, std::string>> components = std::vector<std::pair<RobotDefinition::Components, std::string>>();

    return new RobotDefinition(components);
}

RobotDefinition *RobotDefinitions::Get302Definition()
{
    std::vector<std::pair<RobotDefinition::Components, std::string>> components = std::vector<std::pair<RobotDefinition::Components, std::string>>();

    return new RobotDefinition(components);
}