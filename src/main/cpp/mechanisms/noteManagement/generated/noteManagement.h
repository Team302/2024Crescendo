// clang-format off
//====================================================================================================================================================
// Copyright 2024 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================
// This file was automatically generated by the Team 302 code generator version 1.2.1.0
// Generated on Tuesday, January 30, 2024 8:56:50 PM

#pragma once

#include <string>
#include <memory>

// FRC Includes
#include <networktables/NetworkTable.h>

#include "mechanisms/base/BaseMech.h"
#include "configs/RobotConfigMgr.h"

#include "hw/DragonSparkMax.h"
#include "hw/DragonTalonFX.h"
#include "hw/DragonSparkFlex.h"
#include "hw/DragonDigitalInput.h"
#include "hw/DragonCanCoder.h"

class noteManagement : public BaseMech
{
public:
	noteManagement() = delete;
	~noteManagement() = default;
	noteManagement ( MechanismTypes::MECHANISM_TYPE type, std::string networkTableName );

	virtual void Initialize ( RobotConfigMgr::RobotIdentifier robotFullName ) = 0;
	void Cyclic();

	DragonSparkMax* frontIntake;
	DragonSparkMax* backIntake;
	DragonSparkMax* Transfer;
	DragonTalonFX* Placer;
	DragonSparkFlex* Elevator;
	DragonSparkFlex* Feeder;
	DragonTalonFX* launcherTop;
	DragonTalonFX* launcherBottom;
	DragonSparkMax* launcherAngle;
	DragonDigitalInput* frontIntakeSensor;
	DragonDigitalInput* backIntakeSensor;
	DragonDigitalInput* feederSensor;
	DragonDigitalInput* launcherSensor;
	DragonDigitalInput* placerInSensor;
	DragonDigitalInput* placerMidSensor;
	DragonDigitalInput* placerOutSensor;
	DragonCanCoder* launcherAngleSensor;
	ControlData* percentOutput;
	ControlData* positionInch;
	ControlData* velocityRPS;
	ControlData* posDegreeAbs;
//state* Off;
//state* Ready;
//state* feederIntake;
//state* Expel;
//state* placerIntake;
//state* holdFeederFront;
//state* holdFeederBack;
//state* intakeToFeeder;
//state* launcherToPlacerFront;
//state* launcherToPlacerBack;
//state* holdFeeder;
//state* readyAutoLaunch;
//state* readyManualLaunch;
//state* Pass;
//state* autoLaunch;
//state* manualLaunch;
//state* readyOdometryLaunch;
//state* autoLaunchOdometry;
//state* holdPlacerFront;
//state* holdPlacerBack;
//state* intakeToPlacer;
//state* preparePlaceAmp;
//state* preparePlaceTrap;
//state* placeAmp;
//state* placeTrap;
//state* placerToLauncherFront;
//state* placerToLauncherBack;
//state* backupManualLaunch;
//state* backupManualPlace;

protected:
	std::string m_ntName;
	std::string m_tuningIsEnabledStr;
	bool m_tuning = false;
	std::shared_ptr<nt::NetworkTable> m_table;

private:
	void CheckForTuningEnabled();
	void ReadTuningParamsFromNT();
	void PushTuningParamsToNT();

};