// clang-format off
//====================================================================================================================================================
// Copyright 2024 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================
// This file was automatically generated by the Team 302 code generator version 1.3.0.9
// Generated on Friday, February 23, 2024 8:58:56 PM

// C++ Includes

// FRC Includes

// Team 302 includes
#include "mechanisms/ClimberManager/decoratormods/ClimberManager.h"

#include "hw/DragonSparkMax.h"
#include "mechanisms/ClimberManager/decoratormods/OffState.h"
#include "mechanisms/ClimberManager/decoratormods/InitializeState.h"
#include "mechanisms/ClimberManager/decoratormods/ManualState.h"
#include "mechanisms/ClimberManager/decoratormods/autoClimbState.h"
#include "mechanisms/ClimberManager/decoratormods/HoldState.h"

using std::string;
using namespace ClimberManagerStates;

void ClimberManager::CreateAndRegisterStates()
{
	OffState* OffStateInst = new OffState ( string ( "Off" ), 0, new ClimberManagerAllStatesStateGen ( m_activeRobotId, string ( "Off" ), 0, this ), this );
	AddToStateVector ( OffStateInst );

	InitializeState* InitializeStateInst = new InitializeState ( string ( "Initialize" ), 1, new ClimberManagerAllStatesStateGen ( m_activeRobotId, string ( "Initialize" ), 1, this ), this );
	AddToStateVector ( InitializeStateInst );

	ManualState* ManualStateInst = new ManualState ( string ( "Manual" ), 2, new ClimberManagerAllStatesStateGen ( m_activeRobotId, string ( "Manual" ), 2, this ), this );
	AddToStateVector ( ManualStateInst );

	autoClimbState* autoClimbStateInst = new autoClimbState ( string ( "autoClimb" ), 3, new ClimberManagerAllStatesStateGen ( m_activeRobotId, string ( "autoClimb" ), 3, this ), this );
	AddToStateVector ( autoClimbStateInst );

	HoldState* HoldStateInst = new HoldState ( string ( "Hold" ), 4, new ClimberManagerAllStatesStateGen ( m_activeRobotId, string ( "Hold" ), 4, this ), this );
	AddToStateVector ( HoldStateInst );

	OffStateInst->RegisterTransitionState ( InitializeStateInst );
	InitializeStateInst->RegisterTransitionState ( HoldStateInst );
	ManualStateInst->RegisterTransitionState ( HoldStateInst );
	ManualStateInst->RegisterTransitionState ( autoClimbStateInst );
	autoClimbStateInst->RegisterTransitionState ( HoldStateInst );
	autoClimbStateInst->RegisterTransitionState ( ManualStateInst );
	HoldStateInst->RegisterTransitionState ( ManualStateInst );
}
