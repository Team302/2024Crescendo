// clang-format off
//====================================================================================================================================================
// Copyright 2024 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================
// This file was automatically generated by the Team 302 code generator version 1.3.0.7
// Generated on Tuesday, February 20, 2024 8:54:53 PM

#pragma once
#include <string>

#include "State.h"

#include "mechanisms/base/BaseMechServoState.h"
#include "mechanisms/base/BaseMechSolenoidState.h"
#include "mechanisms/Thing1Mech/generated/Thing1MechBaseStateGen.h"
#include "mechanisms/controllers/ControlData.h"
#include "mechanisms/Thing1Mech/generated/Thing1MechGen.h"
#include "configs/RobotConfigMgr.h"

namespace Thing1MechStates
{
class Thing1MechAllStatesStateGen : public Thing1MechBaseStateGen
{
public:
	Thing1MechAllStatesStateGen ( RobotConfigMgr::RobotIdentifier m_ActiveRobotId,
	                              std::string stateName,
	                              int stateId,
	                              Thing1MechGen *mech );
	Thing1MechAllStatesStateGen() = delete;
	~Thing1MechAllStatesStateGen() = default;

	void Init() override;
	void Run() override;
	void Exit() override;
	bool AtTarget() override;

private:
	RobotConfigMgr::RobotIdentifier m_RobotId;

	void InitThing1();

};
}
