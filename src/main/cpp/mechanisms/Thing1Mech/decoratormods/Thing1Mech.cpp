// clang-format off
//====================================================================================================================================================
// Copyright 2023 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================
// This file was automatically generated by the Team 302 code generator version 1.2.1.0
// Generated on Sunday, January 28, 2024 2:32:03 PM

// C++ Includes
#include <string>

// FRC Includes

// Team 302 includes
#include "PeriodicLooper.h"
#include "mechanisms/Thing1Mech/generated/Thing1Mech_gen.h"
#include "mechanisms/Thing1Mech/decoratormods/Thing1Mech.h"

#include "hw/DragonTalonSRX.h"
#include "hw/DragonTalonSRX.h"
#include "hw/DragonTalonSRX.h"
#include "hw/DragonTalonSRX.h"
#include "hw/DragonTalonFX.h"
#include "hw/DragonSparkMax.h"
#include "hw/DragonSparkFlex.h"

#include "mechanisms/Thing1Mech/decoratormods/Thing1Mech_leftFrontCW_State.h"
#include "mechanisms/Thing1Mech/decoratormods/Thing1Mech_rightFrontCW_State.h"
#include "mechanisms/Thing1Mech/decoratormods/Thing1Mech_rightBackCW_State.h"
#include "mechanisms/Thing1Mech/decoratormods/Thing1Mech_leftBackCW_State.h"
#include "mechanisms/Thing1Mech/decoratormods/Thing1Mech_sparkyOn_State.h"
#include "mechanisms/Thing1Mech/decoratormods/Thing1Mech_thing1Talon_State.h"

#include "robotstate/RobotState.h"


using std::string;

/// @brief  This method constructs the mechanism using composition with its various actuators and sensors.
/// @param controlFileName The control file with the PID constants and Targets for each state
/// @param networkTableName Location for logging information
/// @param motor  Motor in the mechanims - code generator should probably use the usage for the variable name
/// @param otherMotor Same as previous
/// @param solenoid Solenoid in the mechanism - code generator should probably use the usage for the variable name
/// Additional actuators and sensors are also in this list.
Thing1Mech::Thing1Mech ( Thing1Mech_gen *base ) : Thing1Mech_gen(),IRobotStateChangeSubscriber(),
	m_Thing1Mech ( base )
{
	m_scoringMode = RobotStateChanges::ScoringMode::Launcher;
	RobotState::GetInstance()->RegisterForStateChanges(this, RobotStateChanges::StateChange::DesiredScoringMode);
}

void Thing1Mech::createAndRegisterStates()
{
	Thing1MechleftFrontCWState* leftFrontCWState = new Thing1MechleftFrontCWState ( string ( "leftFrontCW" ), 0, new Thing1MechleftFrontCWStateGen ( string ( "leftFrontCW" ), 0, this ), this );
	AddToStateVector ( leftFrontCWState );

	Thing1MechrightFrontCWState* rightFrontCWState = new Thing1MechrightFrontCWState ( string ( "rightFrontCW" ), 1, new Thing1MechrightFrontCWStateGen ( string ( "rightFrontCW" ), 1, this ), this );
	AddToStateVector ( rightFrontCWState );

	Thing1MechrightBackCWState* rightBackCWState = new Thing1MechrightBackCWState ( string ( "rightBackCW" ), 2, new Thing1MechrightBackCWStateGen ( string ( "rightBackCW" ), 2, this ), this );
	AddToStateVector ( rightBackCWState );

	Thing1MechleftBackCWState* leftBackCWState = new Thing1MechleftBackCWState ( string ( "leftBackCW" ), 3, new Thing1MechleftBackCWStateGen ( string ( "leftBackCW" ), 3, this ), this );
	AddToStateVector ( leftBackCWState );

	Thing1MechsparkyOnState* sparkyOnState = new Thing1MechsparkyOnState ( string ( "sparkyOn" ), 4, new Thing1MechsparkyOnStateGen ( string ( "sparkyOn" ), 4, this ), this );
	AddToStateVector ( sparkyOnState );

	Thing1Mechthing1TalonState* thing1TalonState = new Thing1Mechthing1TalonState ( string ( "thing1Talon" ), 5, new Thing1Mechthing1TalonStateGen ( string ( "thing1Talon" ), 5, this ), this );
	AddToStateVector ( thing1TalonState );

	leftFrontCWState->RegisterTransitionState ( rightFrontCWState );
	rightFrontCWState->RegisterTransitionState ( leftBackCWState );
	rightFrontCWState->RegisterTransitionState ( rightBackCWState );
	rightBackCWState->RegisterTransitionState ( leftBackCWState );
	rightBackCWState->RegisterTransitionState ( thing1TalonState );
	leftBackCWState->RegisterTransitionState ( leftFrontCWState );
	leftBackCWState->RegisterTransitionState ( sparkyOnState );
	sparkyOnState->RegisterTransitionState ( leftBackCWState );
	thing1TalonState->RegisterTransitionState ( rightBackCWState );

}

void Thing1Mech::Update(RobotStateChanges::StateChange change, int value)
{
	if (change == RobotStateChanges::DesiredScoringMode)
		m_scoringMode = static_cast<RobotStateChanges::ScoringMode>(value);
}

// todo not sure what to do with this
/*
bool Thing1Mech::IsAtMinPosition(RobotElementNames::ROBOT_ELEMENT_NAMES identifier) const
{
    return m_Thing1Mech->IsAtMinPosition(identifier);
}
bool Thing1Mech::IsAtMinPosition(RobotElementNames::ROBOT_ELEMENT_NAMES identifier) const
{
    return m_Thing1Mech->IsAtMinPosition(identifier);
}
bool Thing1Mech::IsAtMaxPosition(RobotElementNames::ROBOT_ELEMENT_NAMES identifier) const
{
    return m_Thing1Mech->IsAtMaxPosition(identifier);
}
bool Thing1Mech::IsAtMaxPosition(RobotElementNames::ROBOT_ELEMENT_NAMES identifier) const
{
    return m_Thing1Mech->IsAtMaxPosition(identifier);
}
*/
