//====================================================================================================================================================
// Copyright 2024 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================
// This file was automatically generated by the Team 302 code generator version 1.2.3.6
// Generated on Sunday, February 18, 2024 12:51:47 PM

// C++ Includes
#include <string>

// FRC includes

// Team 302 includes
#include "chassis/DragonDriveTargetFinder.h"
#include "DragonVision/DragonVision.h"
#include "mechanisms/noteManager/decoratormods/autoLaunchOdometryState.h"
#include "teleopcontrol/TeleopControl.h"
#include "teleopcontrol/TeleopControlFunctions.h"
#include "utils/logging/Logger.h"

// Third Party Includes

using namespace std;
using namespace noteManagerStates;

/// @class ExampleForwardState
/// @brief information about the control (open loop, closed loop position, closed loop velocity, etc.) for a mechanism state
autoLaunchOdometryState::autoLaunchOdometryState(std::string stateName,
												 int stateId,
												 noteManagerAllStatesStateGen *generatedState,
												 noteManager *mech) : State(stateName, stateId), m_genState(generatedState), m_mechanism(mech)
{
}

void autoLaunchOdometryState::Init()
{
	Logger::GetLogger()->LogData(LOGGER_LEVEL::PRINT, string("ArrivedAt"), string("autoLaunchOdometryState"), string("init"));
	/*
		m_genState->Init();
		auto distanceFromTarget = GetDistanceFromTarget();
		m_targetAngle = m_mechanism->GetRequiredLaunchAngle(distanceFromTarget);
		m_mechanism->UpdateTarget(RobotElementNames::MOTOR_CONTROLLER_USAGE::NOTE_MANAGER_LAUNCHER_ANGLE, m_targetAngle);

		if (distanceFromTarget < units::length::meter_t(1.5))
		{
			m_mechanism->UpdateTarget(RobotElementNames::MOTOR_CONTROLLER_USAGE::NOTE_MANAGER_LAUNCHER_TOP, units::angular_velocity::revolutions_per_minute_t(m_manualLaunchSpeed));
			m_mechanism->UpdateTarget(RobotElementNames::MOTOR_CONTROLLER_USAGE::NOTE_MANAGER_LAUNCHER_BOTTOM, units::angular_velocity::revolutions_per_minute_t(m_manualLaunchSpeed));
			m_targetSpeed = 275;
		}
		else
		{
			m_mechanism->UpdateTarget(RobotElementNames::MOTOR_CONTROLLER_USAGE::NOTE_MANAGER_LAUNCHER_TOP, units::angular_velocity::revolutions_per_minute_t(m_autoLaunchSpeed));
			m_mechanism->UpdateTarget(RobotElementNames::MOTOR_CONTROLLER_USAGE::NOTE_MANAGER_LAUNCHER_BOTTOM, units::angular_velocity::revolutions_per_minute_t(m_autoLaunchSpeed));
			m_targetSpeed = 375;
		}*/
}

void autoLaunchOdometryState::Run()
{
	// Logger::GetLogger()->LogData(LOGGER_LEVEL::PRINT, string("ArrivedAt"), string("autoLaunchOdometryState"), string("run"));
	m_genState->Run();
}

void autoLaunchOdometryState::Exit()
{
	m_genState->Exit();
}

bool autoLaunchOdometryState::AtTarget()
{
	/*double topSpeed = units::angular_velocity::radians_per_second_t(units::angular_velocity::revolutions_per_minute_t(m_mechanism->getlauncherTop()->GetRPS() * 60)).to<double>();
	double botSpeed = units::angular_velocity::radians_per_second_t(units::angular_velocity::revolutions_per_minute_t(m_mechanism->getlauncherBottom()->GetRPS() * 60)).to<double>();

	m_targetAngle = m_mechanism->GetRequiredLaunchAngle();
	auto distanceFromTarget = GetDistanceFromTarget();

	if (distanceFromTarget < units::length::meter_t(1.5))
	{
		m_targetSpeed = 275;
	}
	else
	{
		m_targetSpeed = 375;
	}

	return (((abs(m_mechanism->getlauncherAngle()->GetCounts() - m_targetAngle.value()) <= 0.5) && (topSpeed > m_targetSpeed) && (botSpeed > m_targetSpeed)) || (m_mechanism->getActiveRobotId() == RobotConfigMgr::RobotIdentifier::PRACTICE_BOT_9999));
*/
	return false;
}

bool autoLaunchOdometryState::IsTransitionCondition(bool considerGamepadTransitions)
{
	// To get the current state use m_mechanism->GetCurrentState()

	return (considerGamepadTransitions && TeleopControl::GetInstance()->IsButtonPressed(TeleopControlFunctions::EXAMPLE_MECH_FORWARD));
}

units::length::meter_t autoLaunchOdometryState::GetDistanceFromTarget()
{
	auto distanceFromTarget = units::length::meter_t(1.0);
	auto finder = DragonDriveTargetFinder::GetInstance();
	if (finder != nullptr)
	{
		auto distinfo = finder->GetDistance(DragonDriveTargetFinder::FINDER_OPTION::ODOMETRY_ONLY, DragonVision::VISION_ELEMENT::SPEAKER);
		auto type = get<0>(distinfo);
		if (type != DragonDriveTargetFinder::TARGET_INFO::NOT_FOUND)
		{
			auto odomdist = get<1>(distinfo);
			if (odomdist.value() > 0.5 && odomdist.value() < 5.0)
			{
				distanceFromTarget = odomdist;
			}
		}
	}
	return distanceFromTarget;
}