//====================================================================================================================================================
// Copyright 2024 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================
// This file was automatically generated by the Team 302 code generator version 1.2.3.6
// Generated on Sunday, February 18, 2024 12:51:47 PM

// C++ Includes
#include <string>

// FRC includes

// Team 302 includes
#include "mechanisms/noteManager/decoratormods/OffState.h"
#include "teleopcontrol/TeleopControl.h"
#include "teleopcontrol/TeleopControlFunctions.h"
#include "utils/logging/Logger.h"

// Third Party Includes

using namespace std;
using namespace noteManagerStates;

/// @class ExampleForwardState
/// @brief information about the control (open loop, closed loop position, closed loop velocity, etc.) for a mechanism state
OffState::OffState(std::string stateName,
				   int stateId,
				   noteManagerAllStatesStateGen *generatedState,
				   noteManager *mech) : State(stateName, stateId), m_genState(generatedState), m_mechanism(mech)
{
}

void OffState::Init()
{
	Logger::GetLogger()->LogData(LOGGER_LEVEL::PRINT, string("ArrivedAt"), string("OffState"), string("init"));

	m_genState->Init();
	m_mechanism->getlauncherBottom()->Invert(true);

	auto frontIntake = dynamic_cast<DragonSparkMax *>(m_mechanism->getfrontIntake());
	if (frontIntake != nullptr)
		frontIntake->SetCANTimeout(0);

	auto backIntake = dynamic_cast<DragonSparkMax *>(m_mechanism->getbackIntake());
	if (backIntake != nullptr)
		backIntake->SetCANTimeout(0);

	auto transfer = dynamic_cast<DragonSparkMax *>(m_mechanism->getTransfer());
	if (transfer != nullptr)
		transfer->SetCANTimeout(0);

	auto launcherAngle = dynamic_cast<DragonSparkMax *>(m_mechanism->getlauncherAngle());
	if (launcherAngle != nullptr)
		launcherAngle->SetCANTimeout(0);

	auto elevator = dynamic_cast<DragonSparkMax *>(m_mechanism->getElevator());
	if (elevator != nullptr)
		elevator->SetCANTimeout(0);

	auto feeder = dynamic_cast<DragonSparkFlex *>(m_mechanism->getFeeder());
	if (feeder != nullptr)
		feeder->SetCANTimeout(0);

	auto launcherTop = dynamic_cast<DragonSparkFlex *>(m_mechanism->getlauncherTop());
	if (launcherTop != nullptr)
		launcherTop->SetCANTimeout(0);

	auto launcherBottom = dynamic_cast<DragonSparkFlex *>(m_mechanism->getlauncherBottom());
	if (launcherBottom != nullptr)
		launcherBottom->SetCANTimeout(0);

	auto placer = dynamic_cast<DragonSparkFlex *>(m_mechanism->getPlacer());
	if (placer != nullptr)
		placer->SetCANTimeout(0);
}

void OffState::Run()
{
	Logger::GetLogger()->LogData(LOGGER_LEVEL::PRINT, string("ArrivedAt"), string("OffState"), string("run"));
	m_genState->Run();
}

void OffState::Exit()
{
	m_genState->Exit();
}

bool OffState::AtTarget()
{
	auto attarget = m_genState->AtTarget();
	return attarget;
}

bool OffState::IsTransitionCondition(bool considerGamepadTransitions)
{
	// To get the current state use m_mechanism->GetCurrentState()

	return false;
}

std::string OffState::GetNoteStateName() const
{
	return std::string("OffState");
}
